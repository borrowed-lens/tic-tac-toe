{"version":3,"sources":["App.module.css","components/Squares/squares.module.css","components/UI/Backdrop/Backdrop.module.css","components/UI/Modal/Modal.module.css","components/Square/square.js","components/Squares/squares.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","App.js","store/actionTypes.js","serviceWorker.js","store/reducer.js","index.js","components/Square/square.module.css"],"names":["module","exports","connect","state","squares","props","inProp","Boolean","value","nodeRef","useRef","squareClasses","classes","Square","SquareX","SquareO","CSSTransition","in","timeout","classNames","enter","SquareValueEnter","enterActive","SquareValueEnterActive","ref","className","join","onClick","markPosition","SquareSpan","memo","Squares","row","onMarkPosition","Backdrop","close","Modal","style","winner","backgroundColor","App","checkGameStatus","square","squareStates","checkWinnerHandler","ruleSet","a","b","c","setState","gameOver","player","startGameHandler","gameStart","markPositionHandler","position","result","endGame","restartGame","startBtnRef","createRef","restartBtnRef","leftRef","rightRef","modalRef","this","mountOnEnter","unmountOnExit","ModalEnterActive","exitActive","ModalExitActive","ButtonHolderSpan","enterDone","RestartButtonActive","RestartButton","PrimaryButtonActive","exitDone","PrimaryButton","SquareContainer","exit","LeftDiv","LeftDivActive","RightDiv","RightDivActive","Component","dispatch","playerType","type","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","square1","square2","square3","square4","square5","square6","square7","square8","square9","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.99966899.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3KeYz\",\"SquareContainer\":\"App_SquareContainer__zB65W\",\"LeftDiv\":\"App_LeftDiv__1aWRf\",\"LeftDivActive\":\"App_LeftDivActive__1aFnA\",\"RightDiv\":\"App_RightDiv__7DTxd\",\"RightDivActive\":\"App_RightDivActive__1v68p\",\"ButtonHolderSpan\":\"App_ButtonHolderSpan__1MOjY\",\"PrimaryButton\":\"App_PrimaryButton__3zX5r\",\"PrimaryButtonActive\":\"App_PrimaryButtonActive__1Ym5F\",\"RestartButton\":\"App_RestartButton__2Jcwc\",\"RestartButtonActive\":\"App_RestartButtonActive__2cLnc\",\"ModalEnterActive\":\"App_ModalEnterActive__2fnuI\",\"modalEnter\":\"App_modalEnter__3US-0\",\"ModalExitActive\":\"App_ModalExitActive__1xACH\",\"modalExit\":\"App_modalExit__1oLHK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Squares\":\"squares_Squares__2ZZxe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2ozYo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__2uHbM\"};","import React, { useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport classes from './square.module.css';\r\n\r\nconst Square = (props) => {\r\n    let inProp = Boolean(props.squares[`square${props.value}`]);\r\n    let nodeRef = useRef(null);\r\n    let squareClasses = [\r\n        classes.Square,\r\n        props.squares[`square${props.value}`] === 'X'\r\n            ? classes.SquareX\r\n            : props.squares[`square${props.value}`] === 'O'\r\n            ? classes.SquareO\r\n            : null,\r\n    ];\r\n    return (\r\n        <CSSTransition\r\n            in={inProp}\r\n            timeout={300}\r\n            classNames={{\r\n                enter: classes.SquareValueEnter,\r\n                enterActive: classes.SquareValueEnterActive,\r\n            }}\r\n            nodeRef={nodeRef}>\r\n            <button\r\n                ref={nodeRef}\r\n                className={squareClasses.join(' ')}\r\n                onClick={() => props.markPosition(`square${props.value}`)}>\r\n                <span className={classes.SquareSpan}>\r\n                    {props.squares[`square${props.value}`]}\r\n                </span>\r\n            </button>\r\n        </CSSTransition>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        squares: state.squares,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Square);\r\n","import React, { memo } from 'react';\r\n\r\nimport Square from '../Square/square';\r\nimport classes from './squares.module.css';\r\n\r\nconst Squares = (props) => (\r\n    <div className={classes.Squares}>\r\n        <Square value={props.row} markPosition={props.onMarkPosition}/>\r\n        <Square value={props.row + 1} markPosition={props.onMarkPosition}/>\r\n        <Square value={props.row + 2} markPosition={props.onMarkPosition}/>\r\n    </div>\r\n);\r\nexport default memo(Squares);\r\n","import React from 'react';\r\n\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst Backdrop = (props) => (\r\n    <div className={classes.Backdrop} onClick={props.close}></div>\r\n);\r\nexport default Backdrop;\r\n","import React from 'react';\r\n\r\nimport classes from './Modal.module.css';\r\n\r\nconst Modal = (props) => {\r\n    return (\r\n        <div\r\n            className={classes.Modal}\r\n            onClick={props.close}\r\n            style={\r\n                props.winner === 'X'\r\n                    ? { backgroundColor: '#9fd4ff' }\r\n                    : props.winner === 'O'\r\n                    ? { backgroundColor: '#296392' }\r\n                    : !props.winner\r\n                    ? { backgroundColor: '#ffffff' }\r\n                    : null\r\n            }>\r\n            {props.winner ? (\r\n                <div>winner is {props.winner}</div>\r\n            ) : (\r\n                <div>game is a draw</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nexport default Modal;\r\n","import React, { Component, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\n\nimport classes from './App.module.css';\nimport Squares from './components/Squares/squares';\nimport * as actionTypes from './store/actionTypes';\nimport Backdrop from './components/UI/Backdrop/Backdrop';\nimport Modal from './components/UI/Modal/Modal';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameStart: false,\n            gameOver: false,\n        };\n        this.ruleSet = [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9],\n            [1, 4, 7],\n            [2, 5, 8],\n            [3, 6, 9],\n            [1, 5, 9],\n            [3, 5, 7],\n        ];\n        this.startBtnRef = createRef();\n        this.restartBtnRef = createRef();\n        this.leftRef = createRef();\n        this.rightRef = createRef();\n        this.modalRef = createRef();\n    }\n    checkGameStatus = () => {\n        for (let square in this.squareStates) {\n            if (this.squareStates[square] === '') {\n                return false;\n            }\n        }\n        return true;\n    };\n    checkWinnerHandler = () => {\n        for (let [a, b, c] of this.ruleSet) {\n            if (\n                this.squareStates[`square${a}`] &&\n                this.squareStates[`square${a}`] ===\n                    this.squareStates[`square${b}`] &&\n                this.squareStates[`square${b}`] ===\n                    this.squareStates[`square${c}`]\n            ) {\n                this.setState({\n                    gameOver: true,\n                });\n                return this.player;\n            }\n        }\n        this.setState({\n            gameOver: this.checkGameStatus(),\n        });\n        return false;\n    };\n    startGameHandler = () => {\n        this.player = 'X';\n        this.squareStates = { ...this.props.squares };\n        this.setState({\n            gameStart: true,\n        });\n    };\n    markPositionHandler = (position) => {\n        if (!this.squareStates[position]) {\n            this.squareStates[position] = this.player;\n            this.winner = this.checkWinnerHandler();\n            this.props.markPosition(position, this.player);\n            if (!this.result && !this.state.gameOver) {\n                this.player = this.player === 'X' ? 'O' : 'X';\n            }\n        }\n    };\n    endGame = () => {\n        this.setState({\n            gameOver: false,\n            gameStart: false,\n        });\n        this.props.restartGame();\n    };\n    render() {\n        return (\n            <div className={classes.App}>\n                {this.state.gameOver ? (\n                    <Backdrop close={this.endGame}></Backdrop>\n                ) : null}\n                <CSSTransition\n                    in={this.state.gameOver}\n                    timeout={500}\n                    mountOnEnter\n                    unmountOnExit\n                    classNames={{\n                        enterActive: classes.ModalEnterActive,\n                        exitActive: classes.ModalExitActive,\n                    }}>\n                    <Modal winner={this.winner} close={this.endGame}></Modal>\n                </CSSTransition>\n                <span className={classes.ButtonHolderSpan}>\n                    <CSSTransition\n                        in={this.state.gameStart}\n                        timeout={500}\n                        mountOnEnter\n                        unmountOnExit\n                        nodeRef={this.restartBtnRef}\n                        classNames={{\n                            enterDone: classes.RestartButtonActive,\n                        }}>\n                        <button\n                            ref={this.restartBtnRef}\n                            className={classes.RestartButton}\n                            onClick={this.endGame}>\n                            restart\n                        </button>\n                    </CSSTransition>\n                    <CSSTransition\n                        in={!this.state.gameStart}\n                        timeout={500}\n                        mountOnEnter\n                        unmountOnExit\n                        nodeRef={this.startBtnRef}\n                        classNames={{\n                            enter: classes.PrimaryButtonActive,\n                            exitActive: classes.PrimaryButtonActive,\n                            exitDone: classes.PrimaryButtonActive\n                        }}>\n                        <button\n                            ref={this.startBtnRef}\n                            className={classes.PrimaryButton}\n                            onClick={this.startGameHandler}>\n                            start the game\n                        </button>\n                    </CSSTransition>\n                </span>\n                <div className={classes.SquareContainer}>\n                    <CSSTransition\n                        in={!this.state.gameStart}\n                        timeout={500}\n                        unmountOnExit\n                        nodeRef={this.leftRef}\n                        classNames={{\n                            exit: classes.LeftDiv,\n                            exitActive: classes.LeftDivActive,\n                        }}>\n                        <div\n                            className={classes.LeftDiv}\n                            ref={this.leftRef}></div>\n                    </CSSTransition>\n                    <CSSTransition\n                        in={!this.state.gameStart}\n                        timeout={500}\n                        unmountOnExit\n                        nodeRef={this.rightRef}\n                        classNames={{\n                            exit: classes.RightDiv,\n                            exitActive: classes.RightDivActive,\n                        }}>\n                        <div\n                            className={classes.RightDiv}\n                            ref={this.rightRef}></div>\n                    </CSSTransition>\n                    <div>\n                        <Squares\n                            row={1}\n                            onMarkPosition={this.markPositionHandler}\n                        />\n                        <Squares\n                            row={4}\n                            onMarkPosition={this.markPositionHandler}\n                        />\n                        <Squares\n                            row={7}\n                            onMarkPosition={this.markPositionHandler}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        squares: state.squares,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        markPosition: (position, playerType) =>\n            dispatch({\n                type: actionTypes.MARK_POSITION,\n                position: position,\n                player: playerType,\n            }),\n        restartGame: () => {\n            dispatch({\n                type: actionTypes.RESTART,\n            });\n        },\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const MARK_POSITION = 'MARK_POSITION';\r\nexport const RESTART = 'RESTART';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    result: false,\r\n    squares: {\r\n        square1: '',\r\n        square2: '',\r\n        square3: '',\r\n        square4: '',\r\n        square5: '',\r\n        square6: '',\r\n        square7: '',\r\n        square8: '',\r\n        square9: '',\r\n    },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.MARK_POSITION:\r\n            return {\r\n                ...state,\r\n                player: action.player,\r\n                squares: {\r\n                    ...state.squares,\r\n                    [action.position]: action.player,\r\n                },\r\n            };\r\n        case actionTypes.RESTART:\r\n            return {\r\n                ...initialState,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, compose } from 'redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer';\n\nconst composeEnhancers =\n    (typeof window !== 'undefined' &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\nconst store = createStore(reducer, composeEnhancers());\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"square_Square__26EKs\",\"SquareX\":\"square_SquareX__Xn7lK\",\"SquareO\":\"square_SquareO__garIg\",\"SquareValueEnter\":\"square_SquareValueEnter__2bnER\",\"SquareValueEnterActive\":\"square_SquareValueEnterActive__3yCbp\"};"],"sourceRoot":""}